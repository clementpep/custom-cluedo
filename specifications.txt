🕹️ Cluedo Custom — Concept global

“Crée ton manoir. Invite des poupouilles. Le narrateur IA Lesland (euh non c'est Desland) enquête avec vous… ou contre vous.”

🎯 Objectif

Découvrir la combinaison coupable (Suspect + Arme + Lieu)
avant les autres joueurs — en interagissant avec une IA Maître du Jeu qui commente, bluffe et raconte.

⚙️ 1. Création de la partie (par un joueur hôte)
🧩 Étape 1 — Thème et contexte

L’hôte choisit :

Un titre de partie (ex : Meurtre au coworking ou Drame à la coloc).

* Créer une nouvelle partie

  * Saisir un nom de partie.

  * Choisir le nombre de salles et leurs noms (ex : "Cuisine", "Salle de réunion", "Terrasse"...).

  * (Optionnel) Activer ou non le mode IA pour générer des descriptions ou scénarios.

* Rejoindre une partie existante

  * Via un code ou lien de partage (UUID court).

  * Le joueur saisit son nom ou pseudo.

  * Lister les parties actives (en cours sur le serveur).

L’hôte ajoute les suspects (réels ou fictifs).

Idem pour les armes (“Clé USB”, “Capsule de café”, “Câble HDMI”, etc.)

🤖 Étape 4 — L'app scelle le crime

L’app choisit aléatoirement une combinaison suspect + arme + lieu → “le crime secret”.

👥 2. Connexion des joueurs

Chaque joueur rejoint via un code de partie (type “AB7F”) en ajoutant son pseudo et une photo (en option) 
Sur mobile, ils voient :

Leur profil (pseudo, avatar)

Leur feuille d’enquête numérique avec grilles interactives

Le plateau (vue simplifiée des pièces, connectées)

💡 Si tu veux garder les ressources légères, ce plateau peut être :

Soit une grille isométrique stylisée (SVG ou simple div CSS)

Soit une carte générée dynamiquement via JSON de la config hôte.

Lorsqu'au moins 3 joueurs (dont l'hote) sont connectés, l'hote peut lancer la partie

Grille a cocher pour éliminer les possibilités

Navigation intuitive :

Chaque joueur :

Lance les dés (virtuel) → se déplace sur le plateau.

Une fois dans une pièce, peut faire une suggestion en sélectionnant suspect, arme et lieu dans des listes déroulantes.

🤖 L’IA Maître du Jeu intervient :

Elle réagit avec personnalité :

“Une clé USB ? Sérieusement ? Tu crois qu’il l’a tué à coup de PowerPoint ?”
“Mauvaise piste, détective. Tes neurones ont pris un café sans toi.”

L’IA :

Garde trace des suggestions.

Reformulation fluide des messages de jeu.

🧠 4. Feuille d’enquête numérique

🏗️ 4. Architecture technique

Front-end

Framework léger : React + FastAPI backend (selon préférences).


🎭 5. L’IA comme moteur de narration dynamique

Là, tu fais la différence avec le Cluedo classique :

📖 L’IA raconte :

L’intro du crime (“Daniel a été retrouvé sans vie dans le hall du coworking. Sa clé USB, brisée, gît au sol…”)

Les transitions entre tours (“Une tempête s’abat dehors. Le Wi-Fi vacille. Suspense...”)

Les conclusions (“Pierre baisse la tête. L’IA a parlé. Le coupable est démasqué.”)

🧩 Comportement adaptatif :

L’IA peut être plus ou moins moqueuse, dramatique, ou complice selon la tonalité choisie.

Elle peut injecter des événements aléatoires : “Coupure de courant : tout le monde reste figé une manche !”

🧑‍💻 6. Architecture simple pour Hugging Face Space
Élément	Tech suggérée
UI mobile responsive	Gradio Blocks + custom CSS
Stockage des parties	Dictionnaire Python (ou TinyDB / JSON local)
Génération IA	API OpenAI/HF pour la narration
État de partie / logique	Python (serveur FastAPI intégré à Gradio)
Plateau	Composant HTML dynamique généré à partir du JSON des lieux
Multi-joueurs	WebSocket léger (ou polling HTTP + threads)


💬 Exemple de tour complet

Hugging Face Space (Gradio ou API + frontend minimal).

Exposition sur un seul port HTTP (7860 par défaut HF).

Pas d’état long terme : la perte du conteneur efface les parties (ok pour usage récréatif).

⚙️ 5. Variables d’environnement
Nom	Description	Valeur par défaut
USE_OPENAI	Active la génération IA	false
OPENAI_API_KEY	Clé OpenAI (optionnelle)	""
APP_NAME	Nom affiché dans l’interface	"Cluedo Custom"
MAX_PLAYERS	Nombre max de joueurs par partie	8

🧠 6. Comportement IA (si activé)

Utiliser GPT (via OpenAI API) pour :

Générer la mise en scène du lieu : “Le meurtre a eu lieu dans la Salle des serveurs…”

Personnaliser les noms et descriptions de personnages.

Ajouter du dialogue narratif léger pendant les tours. Le bot s'appelle 

Les prompts doivent être courts et à température basse pour éviter les délais.

Pas d’appel IA bloquant : timeout max 3 secondes par requête.

🔒 8. Gestion des sessions / multi-joueurs

Génération d’un Game ID unique à 6 caractères.

Stockage des sessions en mémoire avec la liste des joueurs connectés.

Chaque joueur identifié par un UUID stocké côté navigateur.

Synchronisation légère entre joueurs (polling toutes les 2–3 secondes au lieu de WebSocket si besoin d’économie CPU).

🧪 9. Tests & validation

Unitaires : logique du moteur de jeu (distribution, accusation, vérification).

End-to-end : création et déroulement d’une partie complète à 3 joueurs simulés.

Tests IA (optionnels) : vérification du format et temps de réponse des prompts.

📦 10. Livrables attendus

Dockerfile léger (< 300 MB image finale).

Fichier requirements.txt clair et court.

Script app.py ou main.py lançant l’app HF.

Documentation README.md :

Variables d’environnement

Instructions pour exécution locale et Space.

Description du mode IA.
